/*11) Crie uma fun√ß√£o que receba uma array e retorne o primeiro e o √∫ltimo elemento desse array como um novo
array:
Exemplos:
receberPrimeiroEUltimoElemento([7,14,"ol√°"]) // retornar√° [7, "ol√°"]
receberPrimeiroEUltimoElemento([-100, "aplicativo", 16]) // retornar√° [-100, 16]
 */
console.log(``)
console.log(`   Exerc√≠cio 11 `)
console.log(``)

function receberPrimeiroEUltimoElemento(array) {
    let first = array[0]
    let last = array[array.length - 1]
    console.log(`Primeiro: (${first}), Ultimo: (${last})`)
}
receberPrimeiroEUltimoElemento([7, 14, "ol√°"])
receberPrimeiroEUltimoElemento([-100, "aplicativo", 16])

/*12) Quando temos um objeto e manipulamos seus atributos, adicionando, atualizando ou removendo-os, estamos
apenas modificando-o, mas, em ess√™ncia, o objeto continua o mesmo, ou seja a sua refer√™ncia de mem√≥ria √© a
mesma.
Num projeto que voc√™ est√° trabalhando, voc√™ foi designado a refatorar diversas fun√ß√µes para que fa√ßam
c√≥pias de objetos e manipulem os dados dessas c√≥pias, com o intuito de evitar efeitos indesej√°veis em
algumas situa√ß√µes devido a refer√™ncias a objetos. Abaixo, est√° a descri√ß√£o de uma dessas fun√ß√µes.
Voc√™ escrever√° uma fun√ß√£o que recebe um objeto como primeiro par√¢metro e, como segundo par√¢metro, o
nome de uma propriedade contida nesse objeto. Em seguida, retorne uma c√≥pia desse objeto sem a
propriedade especificada no segundo par√¢metro.

Exemplos:                                                       VEJA O ORIGINAL
removerPropriedade({a: 1, b: 2}, "a") // retornar√° {b: 2}
removerPropriedade({id: 20, nome: "caneta", descricao: ""}, "descricao") // retornar√° {id: 20, nome: "caneta"}  
*/
console.log(``)
console.log(`   Exerc√≠cio 12 `)
console.log(``)

function removerPropriedade(objeto, argumento) {
    const copia = Object.assign({}, objeto)
    delete copia[argumento]
    console.log(copia)
}
removerPropriedade({ a: 1, b: 2 }, "a")
removerPropriedade({ id: 20, nome: "caneta", descricao: "" })

/*13) Crie uma fun√ß√£o que receba um array de elementos e retorne um array somente com os n√∫meros presentes no
array recebido como par√¢metro.
Exemplos:
filtrarNumeros(["Javascript", 1, "3", "Web", 20]) // retornar√° [1, 20]
filtrarNumeros(["a", "c"]) // retornar√° []
 */
console.log(``)
console.log(`   Exerc√≠cio 13 `)
console.log(``)

function filtrarNumeros(array) {
    console.log(arraynumbers = array.filter(a => typeof a === "number"))
}
filtrarNumeros(["Javascript", 1, "3", "Web", 20])
filtrarNumeros(["a", "c"])

/*14) Desenvolva uma fun√ß√£o que recebe como par√¢metro um objeto e retorne um array de arrays, em que cada
elemento √© um array formado pelos pares chave/valor que corresponde a um atributo do objeto. Observe os
exemplos abaixo para um melhor entendimento:
Exemplos:
objetoParaArray({ nome: "Maria", profissao: "Desenvolvedora de software" }) // ir√° retornar [["nome", "Maria"], ["profissao", "Desenvolvedora de Software"]]
objetoParaArray({ codigo: 11111, preco: 12000})                             // ir√° retornar [["codigo", 11111], ["preco", 12000]] 
*/
console.log(``)
console.log(`   Exerc√≠cio 14 `)
console.log(``)

function objetoParaArray(objeto) {
    const objarray = Object.entries(objeto)
    console.log(objarray)
}
objetoParaArray({ nome: "Maria", profissao: "Desenvolvedora de software" })
objetoParaArray({ codigo: 11111, preco: 12000 })

/*15) Elabore uma fun√ß√£o que receba um array de n√∫meros e retorne um array que tenha todos os n√∫meros que s√£o
pares e que tamb√©m tenham √≠ndices pares.
üí° Lembre-se que um n√∫mero √© par porque √© divis√≠vel por 2, ou seja, o resto da divis√£o da divis√£o dele
por 2 √© zero.
Exemplos:
receberSomenteOsParesDeIndicesPares([1, 2, 3, 4]) // retornar√° []
receberSomenteOsParesDeIndicesPares([10, 70, 22, 43]) // retornar√° [10, 22] 
*/
console.log(``)
console.log(`   Exerc√≠cio 15 `)
console.log(``)

function receberSomenteOsParesDeIndicesPares(array) {
    const auxiliar = []
    for (let i = 0; i < array.length; i = i + 2) {
        if (array[i] % 2 === 0) {
            auxiliar.push(array[i])
        }
    }
    console.log(auxiliar)
}
receberSomenteOsParesDeIndicesPares([1, 2, 3, 4])
receberSomenteOsParesDeIndicesPares([10, 70, 22, 43])

/*16) A fim de manter o calend√°rio anual ajustado com o movimento de transla√ß√£o da Terra, criou-se os anos
bissextos, que t√™m 366 dias em vez dos 365 presentes nos anos normais.
Para determinar se um ano √© bissexto, √© necess√°rio saber se ele √© multiplo de 4. N√£o pode ser m√∫ltiplo de 100,
exceto se for tamb√©m m√∫ltiplo de 400.
Com isso em mente, desenvolva uma fun√ß√£o que recebe um n√∫mero correspondente a um ano e retorna se ele
√© bissexto ou n√£o.
Exemplos:
Exerc√≠cios - Curso Fundamentos de Programa√ß√£o 4
checarAnoBissexto(2020) // retornar√° true
checarAnoBissexto(2100) // retornar√° false, pois √© m√∫ltiplo de 100 e n√£o √© m√∫ltiplo de 400
 */
console.log(``)
console.log(`   Exerc√≠cio 16 `)
console.log(``)

function checarAnoBissexto(ano) {
    if (ano % 4 == 0 && ano % 100 != 0 || ano % 400 == 0) {
        console.log(`${ano} √© bissexto`)
    } else {
        console.log(`${ano} n√£o √© bissexto`)
    }

}
checarAnoBissexto(2020)
checarAnoBissexto(2100)

/*17) Escreva uma fun√ß√£o que receba um array de n√∫meros e retornar√° a soma de todos os n√∫meros desse array.
Exemplos:
somarNumeros([10, 10, 10]) // retornar√° 30
somarNumeros([15, 15, 15, 15]) // retornar√° 60 
*/
console.log(``)
console.log(`   Exerc√≠cio 17 `)
console.log(``)

function somarNumeros(array) {
    const auxiliar = array.reduce(function (a, b) { return a + b })
    console.log(auxiliar)
}
somarNumeros([10, 10, 10])
somarNumeros([15, 15, 15, 15])

/*18) Voc√™ est√° trabalhando numa aplica√ß√£o pessoal de controle de despesas. Na tela principal dessa aplica√ß√£o, √©
poss√≠vel adicionar produtos ou servi√ßos, informando nome, categoria e pre√ßo. Uma funcionalidade que voc√™
est√° desenvolvendo no momento √© a de somar o total das despesas.
Crie uma fun√ß√£o que receba um array de produtos e retorne o total das despesas.
Exemplos:
despesasTotais([{nome: "Jornal online", categoria: "Informa√ß√£o", preco: 89.99},{nome: "Cinema", categoria: "Entretenimento", preco: 150}]) // retornar√° 239.99
despesasTotais([{nome: "Galaxy S20", categoria: "Eletr√¥nicos", preco: 3599.99},{nome: "Macbook Pro", categoria: "Eletr√¥nicos", preco: 30999.90}]) // retornar√° 34599.89 
*/
console.log(``)
console.log(`   Exerc√≠cio 18 `)
console.log(``)

function despesasTotais (array) {
    const soma = (a, b) => a + b
    const auxiliar = array.map(a => a.preco).reduce(soma)
    console.log(auxiliar)
}
despesasTotais([{nome: "Jornal online", categoria: "Informa√ß√£o", preco: 89.99},{nome: "Cinema", categoria: "Entretenimento", preco: 150}])
despesasTotais([{nome: "Galaxy S20", categoria: "Eletr√¥nicos", preco: 3599.99},{nome: "Macbook Pro", categoria: "Eletr√¥nicos", preco: 30999.90}])

/*19) Numa aplica√ß√£o Web de investimento financeiro da qual voc√™ faz parte da equipe de desenvolvimento,
pretende-se adicionar a funcionalidade de calcular a m√©dia de um conjunto de n√∫meros informados pelo
usu√°rio.
Com o intuito de realizar esse c√°lculo, crie uma fun√ß√£o que receba um array com uma quantidade
indeterminada de n√∫meros e retorne a m√©dia simples desses n√∫meros.
üí° A m√©dia simples √© o resultado da soma de todos os n√∫meros dividido pela quantidade de n√∫meros.
Exemplos:
calcularMedia([0, 10]) // retornar√° 5
calcularMedia([1, 2, 3, 4, 5]) // retornar√° 3
 */
console.log(``)
console.log(`   Exerc√≠cio 19 `)
console.log(``)

function calcularMedia(valores){
    const soma = (a, b) => a + b
    const auxiliar = valores.reduce(soma)
    const leng = valores.length 
    console.log(auxiliar/leng)
}
calcularMedia([0, 10])
calcularMedia([1, 2, 3, 4, 5])

/*20) Fa√ßa uma fun√ß√£o que recebe a base e a altura de um tri√¢ngulo e retorne a √°rea desse tri√¢ngulo. A precis√£o
dever√° ser de duas casas decimais, arredondando se necess√°rio.
üìï Obs: a f√≥rmula para calcular a √°rea de um tri√¢ngulo √© (base x altura) / 2
Exemplos:
areaDoTriangulo(10, 15) // retornar√° 75.00
areaDoTriangulo(7, 9) // retornar√° 31.50
areaDoTriangulo(9.25, 13.1) // retornar√° 60.59 
*/
console.log(``)
console.log(`   Exerc√≠cio 20 `)
console.log(``)

function areaDoTriangulo (base, altura) {
    const area = base * altura / 2
    console.log(`√Årea: ${Math.floor(area).toFixed(2)}`)
}

areaDoTriangulo(10, 15) 
areaDoTriangulo(7, 9) 
areaDoTriangulo(9.25, 13.1)